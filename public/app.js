// SleepHelper - Personal Sleep Comfort Assistant
// JavaScript Application - Web Deployment Ready

// PWA Registration
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('sw.js')
      .then(registration => {
        console.log('‚úÖ Service Worker registered successfully:', registration.scope);
      })
      .catch(error => {
        console.log('‚ùå Service Worker registration failed:', error);
      });
  });
}

// Web Deployment Detection
const isWebDeployment = window.location.protocol === 'https:' || 
                       (window.location.hostname !== 'localhost' && 
                        window.location.hostname !== '127.0.0.1');

console.log('üåê Web Deployment Mode:', isWebDeployment);

// Settings persistence
function loadSettings() {
    try {
        const savedIp = localStorage.getItem('esp8266_ip');
        const savedDemo = localStorage.getItem('demo_mode');
        if (savedIp) {
            window.ESP8266_IP = savedIp;
            window.ESP_BASE_URL = `http://${savedIp}`;
        }
        if (savedDemo !== null) {
            WEB_DEPLOYMENT.demoMode = savedDemo === 'true';
        }
        // Reflect into UI if elements exist
        const ipInput = document.getElementById('espIpInput');
        const demoCheckbox = document.getElementById('demoModeCheckbox');
        if (ipInput) ipInput.value = window.ESP8266_IP || '';
        if (demoCheckbox) demoCheckbox.checked = !!WEB_DEPLOYMENT.demoMode;
    } catch (e) {
        console.warn('Failed to load settings:', e.message);
    }
}

function saveSettings() {
    try {
        const ipInput = document.getElementById('espIpInput');
        const demoCheckbox = document.getElementById('demoModeCheckbox');
        if (ipInput) {
            const ip = ipInput.value.trim();
            const ipRegex = /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/;
            const ipError = document.getElementById('ipError');
            if (!ipRegex.test(ip)) {
                if (ipError) ipError.style.display = 'block';
                showStatus('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö IP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 2500);
                return;
            }
            if (ipError) ipError.style.display = 'none';
            if (ip) {
                localStorage.setItem('esp8266_ip', ip);
                window.ESP8266_IP = ip;
                window.ESP_BASE_URL = `http://${ip}`;
            }
        }
        if (demoCheckbox) {
            const demo = !!demoCheckbox.checked;
            localStorage.setItem('demo_mode', String(demo));
            WEB_DEPLOYMENT.demoMode = demo;
        }
        const saved = document.getElementById('settingsSaved');
        if (saved) {
            saved.style.display = 'inline';
            setTimeout(() => saved.style.display = 'none', 1200);
        }
        showStatus('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
        // Re-run connection check quickly
        checkESPConnection();
    } catch (e) {
        showStatus('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        console.error(e);
    }
}

// Global state management
const appState = {
    currentPage: 'landing',
    light: { level: 0, mode: 'fixed', timer: null },
    fan: { speed: 0, mode: 'fixed', timer: null },
    sound: { type: '', volume: 50, mode: 'loop', timer: null },
    music: { 
        isPlaying: false, 
        currentTrack: -1, 
        playlist: [
            { id: 'rain', name: 'üåßÔ∏è ‡∏ù‡∏ô‡∏ï‡∏Å' },
            { id: 'ocean', name: 'üåä ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡∏ó‡∏∞‡πÄ‡∏•' },
            { id: 'lullaby', name: 'üéµ ‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏°' },
            { id: 'therapy', name: 'üé∂ ‡πÄ‡∏û‡∏•‡∏á‡∏ö‡∏≥‡∏ö‡∏±‡∏î' },
            { id: 'dhamma', name: 'üôè ‡∏ö‡∏ó‡∏ò‡∏±‡∏°‡∏à‡∏±‡∏Å‡∏£‡∏Å‡∏±‡∏õ‡∏õ‡∏ß‡∏±‡∏ï‡∏ô‡∏™‡∏π‡∏ï‡∏£' },
            { id: 'mongkol', name: 'üìø ‡∏£‡∏ß‡∏°‡∏ö‡∏ó‡∏°‡∏á‡∏Ñ‡∏•' },
            { id: 'tibet', name: 'üîî ‡∏Ç‡∏±‡∏ô‡∏ó‡∏¥‡πÄ‡∏ö‡∏ï' },
            { id: 'frequency', name: 'üéØ 432Hz+528Hz' },
            { id: 'piano', name: 'üéπ ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡∏µ‡∏¢‡πÇ‡∏ô' },
            { id: 'mozart', name: 'üéº ‡πÇ‡∏°‡∏™‡∏≤‡∏£‡πå‡∏ó‡∏Å‡∏•‡πà‡∏≠‡∏°‡∏ô‡∏≤‡∏ô' }
        ]
    },
    esp8266Connected: false
};

// ESP8266 Communication Functions
async function sendToESP(endpoint, params = {}) {
    try {
        // ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏≤‡∏ò‡∏¥‡∏ï: ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î demoMode ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (short-circuit)
        if (typeof WEB_DEPLOYMENT !== 'undefined' && WEB_DEPLOYMENT.demoMode) {
            console.log('üåê Web Demo Mode: Simulating ESP8266 response');
            return simulateESPResponse(endpoint, params);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        if (!ESP8266_IP) {
            console.warn('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IP Address ‡∏Ç‡∏≠‡∏á ESP8266!');
            updateConnectionStatus('disconnected', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IP Address');
            return null;
        }
        
        const url = new URL(`${ESP_BASE_URL}/${endpoint}`);
        Object.entries(params).forEach(([key, value]) => url.searchParams.append(key, value));
        
        console.log(`üîó Sending request to: ${url.toString()}`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), CONFIG.CONNECTION_TIMEOUT);
        
        const response = await fetch(url.toString(), {
            method: 'GET',
            signal: controller.signal,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        // ‡∏≠‡πà‡∏≤‡∏ô JSON response ‡∏à‡∏£‡∏¥‡∏á
        const data = await response.json();
        appState.esp8266Connected = (data.status === 'ok');
        
        console.log('‚úÖ ESP8266 response:', data);
        return data;
        
    } catch (error) {
        console.error('‚ùå ESP8266 connection error:', error);
        appState.esp8266Connected = false;
        
        if (error.name === 'AbortError') {
            console.log('‚è∞ Request timeout - ESP8266 may be offline');
            updateConnectionStatus('disconnected', '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)');
        } else if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
            console.log('üåê Network error - ESP8266 unreachable');
            updateConnectionStatus('disconnected', `‡πÑ‡∏°‡πà‡∏û‡∏ö ESP8266 ‡∏ó‡∏µ‡πà ${ESP8266_IP}`);
        } else if (error.message.includes('CORS') || error.message.includes('blocked')) {
            console.log('üîí CORS/Security error - ESP8266 needs CORS headers');
            updateConnectionStatus('disconnected', 'ESP8266 ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS headers');
        } else if (error.message.includes('Mixed Content') || error.message.includes('https')) {
            console.log('üîê Mixed Content error - HTTPS to HTTP blocked');
            updateConnectionStatus('disconnected', '‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Mixed Content (HTTPS‚ÜíHTTP)');
        } else {
            console.log('‚ùì Other error:', error.message);
            updateConnectionStatus('disconnected', `‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
        }
        
        return null;
    }
}

// ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å ESP8266 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö web demo
function simulateESPResponse(endpoint, params = {}) {
    console.log('üé≠ Simulating ESP8266 response for:', endpoint, params);
    
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏° endpoint
    switch (endpoint) {
        case 'status':
            return {
                status: 'ok',
                timestamp: Date.now(),
                rssi: -45,
                heap: 32768,
                playing: appState.music.isPlaying,
                track: appState.music.currentTrack + 1,
                volume: Math.round((appState.sound.volume / 100) * CONFIG.DFPLAYER_MAX_VOLUME),
                light: appState.light.level,
                fan: appState.fan.speed,
                uptime: Math.floor(Date.now() / 1000)
            };
            
        case 'play':
            appState.music.isPlaying = true;
            appState.music.currentTrack = (params.track || 1) - 1;
            return { status: 'playing', track: params.track };
            
        case 'pause':
        case 'stop':
            appState.music.isPlaying = false;
            return { status: 'stopped' };
            
        case 'light':
            appState.light.level = params.level || 0;
            return { level: appState.light.level };
            
        case 'fan':
            appState.fan.speed = params.speed || 0;
            return { speed: appState.fan.speed };
            
        case 'volume':
            appState.sound.volume = Math.round((params.level / CONFIG.DFPLAYER_MAX_VOLUME) * 100);
            return { volume: params.level };
            
        case 'selectTrack':
            appState.music.currentTrack = (params.track || 1) - 1;
            return { track: params.track };
            
        case 'next':
            appState.music.currentTrack = Math.min(appState.music.currentTrack + 1, appState.music.playlist.length - 1);
            return { track: appState.music.currentTrack + 1 };
            
        case 'previous':
            appState.music.currentTrack = Math.max(appState.music.currentTrack - 1, 0);
            return { track: appState.music.currentTrack + 1 };
            
        default:
            return { status: 'demo_mode' };
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤
async function pingESP() {
    try {
        console.log(`üèì Testing ESP8266 connection at ${ESP8266_IP}...`);
        
        // ‡πÉ‡∏ä‡πâ fetch ‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà /status endpoint
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000);
        
        const response = await fetch(`http://${ESP8266_IP}/status`, {
            method: 'GET',
            signal: controller.signal,
            headers: {
                'Accept': 'application/json'
            }
        });
        
        clearTimeout(timeoutId);
        
        if (response.ok) {
            const data = await response.json();
            return data.status === 'ok';
        } else {
            console.log(`HTTP ${response.status}: ${response.statusText}`);
            return false;
        }
        
    } catch (error) {
        console.error('Ping failed:', error.message);
        return false;
    }
}

async function checkESPConnection() {
    updateConnectionStatus('checking', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î demoMode ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ demo mode (‡πÑ‡∏°‡πà‡∏ó‡∏≥ network calls ‡∏à‡∏£‡∏¥‡∏á)
    if (typeof WEB_DEPLOYMENT !== 'undefined' && WEB_DEPLOYMENT.demoMode) {
        console.log('üåê Web Demo Mode: Simulating ESP8266 connection');
        updateConnectionStatus('connected', '‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏≤‡∏ò‡∏¥‡∏ï (Demo Mode)');
        showStatus('‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏≤‡∏ò‡∏¥‡∏ï - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP8266');
        return true;
    }
    
    // ‡πÉ‡∏ä‡πâ sendToESP ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏≠‡πà‡∏≤‡∏ô JSON ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á)
    const result = await sendToESP('status');
    if (result && result.status === 'ok') {
        const statusMsg = result.rssi ? `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (RSSI: ${result.rssi}dBm)` : '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        updateConnectionStatus('connected', statusMsg);
        showStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP8266 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        return true;
    } else {
        // ‡∏ñ‡πâ‡∏≤ sendToESP ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á ping ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        console.log('sendToESP failed, trying simple ping...');
        const pingResult = await pingESP();
        if (pingResult) {
            updateConnectionStatus('connected', '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (ping only)');
            showStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP8266 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏à‡∏≥‡∏Å‡∏±‡∏î)');
            return true;
        } else {
            updateConnectionStatus('disconnected', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ');
            return false;
        }
    }
}

function updateConnectionStatus(status, message) {
    const statusDot = document.querySelector('.status-dot');
    const statusText = document.querySelector('.status-text');
    // Only target control area (do NOT disable Settings UI)
    const controls = document.querySelectorAll('.controls-container .btn, .controls-container .music-btn, .controls-container .slider, .controls-container .dropdown');
    
    // Remove all status classes
    statusDot.classList.remove('connected', 'disconnected');
    
    // Add appropriate class and update text
    if (status === 'connected') {
        statusDot.classList.add('connected');
        statusText.textContent = message;
        statusText.style.color = '#4caf50';
        controls.forEach(el => el.disabled = false);
    } else if (status === 'disconnected') {
        statusDot.classList.add('disconnected');
        statusText.textContent = message;
        statusText.style.color = '#f44336';
        controls.forEach(el => el.disabled = true);
    } else {
        // checking status
        statusText.textContent = message;
        statusText.style.color = '#37474f';
        controls.forEach(el => el.disabled = true);
    }
}

function startConnectionMonitoring() {
    // Check connection every 10 seconds
    setInterval(async () => {
        if (appState.currentPage === 'control') {
            await checkESPConnection();
        }
    }, CONFIG.CONNECTION_CHECK_INTERVAL);
}

// Page navigation functions
function goToControlPage() {
    const landingPage = document.getElementById('landingPage');
    const controlPage = document.getElementById('controlPage');
    
    landingPage.classList.remove('active');
    setTimeout(() => {
        landingPage.style.display = 'none';
        controlPage.style.display = 'flex';
        setTimeout(() => {
            controlPage.classList.add('active');
            appState.currentPage = 'control';
            showStatus('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°');
        }, 50);
    }, 250);
}

function goToLandingPage() {
    const landingPage = document.getElementById('landingPage');
    const controlPage = document.getElementById('controlPage');
    
    controlPage.classList.remove('active');
    setTimeout(() => {
        controlPage.style.display = 'none';
        landingPage.style.display = 'flex';
        setTimeout(() => {
            landingPage.classList.add('active');
            appState.currentPage = 'landing';
        }, 50);
    }, 250);
}

// Status bar functions
function showStatus(message, duration = 3000) {
    const statusBar = document.getElementById('statusBar');
    const statusText = document.getElementById('statusText');
    
    statusText.textContent = message;
    statusBar.classList.add('show');
    
    setTimeout(() => {
        statusBar.classList.remove('show');
    }, duration);
}

// Light Control Functions
function setLightLevel(button, level) {
    const buttons = button.parentElement.querySelectorAll('.btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    button.classList.add('active');
    
    appState.light.level = level;
    
    const levelText = level === 0 ? '‡∏õ‡∏¥‡∏î' : `‡∏£‡∏∞‡∏î‡∏±‡∏ö ${level}`;
    showStatus(`‡πÅ‡∏™‡∏á: ${levelText}`);
    
    console.log('Light level set to:', level);
}

function toggleLightMode(toggle) {
    toggle.classList.toggle('active');
    const timerDiv = document.getElementById('lightTimer');
    
    if (toggle.classList.contains('active')) {
        timerDiv.style.display = 'none';
        appState.light.mode = 'fixed';
        showStatus('‡πÅ‡∏™‡∏á: ‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà');
    } else {
        timerDiv.style.display = 'flex';
        appState.light.mode = 'timer';
        showStatus('‡πÅ‡∏™‡∏á: ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤');
    }
}

// Fan Control Functions
function setFanSpeed(button, speed) {
    const buttons = button.parentElement.querySelectorAll('.btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    button.classList.add('active');
    
    const fanIcon = document.querySelector('.fan-icon');
    
    if (speed == 0) {
        fanIcon.classList.remove('spinning');
        appState.fan.speed = 0;
        showStatus('‡∏û‡∏±‡∏î‡∏•‡∏°: ‡∏õ‡∏¥‡∏î');
    } else {
        fanIcon.classList.add('spinning');
        fanIcon.style.animationDuration = `${2 - (speed * 0.3)}s`;
        appState.fan.speed = speed;
        showStatus(`‡∏û‡∏±‡∏î‡∏•‡∏°: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ${speed}`);
    }
    
    console.log('Fan speed set to:', speed);
}

function toggleFanMode(toggle) {
    toggle.classList.toggle('active');
    const timerDiv = document.getElementById('fanTimer');
    
    if (toggle.classList.contains('active')) {
        timerDiv.style.display = 'none';
        appState.fan.mode = 'fixed';
        showStatus('‡∏û‡∏±‡∏î‡∏•‡∏°: ‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà');
    } else {
        timerDiv.style.display = 'flex';
        appState.fan.mode = 'timer';
        showStatus('‡∏û‡∏±‡∏î‡∏•‡∏°: ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤');
    }
}

// Music Player Functions
async function selectSound(sound) {
    appState.sound.type = sound;
    
    if (sound) {
        // Find track index in playlist
        const trackIndex = appState.music.playlist.findIndex(track => track.id === sound);
        if (trackIndex !== -1) {
            appState.music.currentTrack = trackIndex;
            updateNowPlaying();
            
            // Send to ESP8266 - track numbers start from 1
            await sendToESP('selectTrack', { track: trackIndex + 1 });
            
            showStatus(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á: ${appState.music.playlist[trackIndex].name}`);
            console.log(`Selected track ${trackIndex + 1}: ${sound}`);
        }
    } else {
        appState.music.currentTrack = -1;
        updateNowPlaying();
        await sendToESP('stop');
    }
}

async function togglePlayPause() {
    if (appState.music.currentTrack === -1) {
        showStatus('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô');
        return;
    }

    appState.music.isPlaying = !appState.music.isPlaying;
    
    const playIcon = document.getElementById('playIcon');
    const pauseIcon = document.getElementById('pauseIcon');
    const nowPlaying = document.getElementById('nowPlaying');
    
    if (appState.music.isPlaying) {
        playIcon.style.display = 'none';
        pauseIcon.style.display = 'block';
        nowPlaying.classList.add('playing');
        
        // Send play command to ESP8266
        await sendToESP('play', { track: appState.music.currentTrack + 1 });
        
        showStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: ${appState.music.playlist[appState.music.currentTrack].name}`);
    } else {
        playIcon.style.display = 'block';
        pauseIcon.style.display = 'none';
        nowPlaying.classList.remove('playing');
        
        // Send pause command to ESP8266
        await sendToESP('pause');
        
        showStatus('‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á');
    }
    
    console.log('Music', appState.music.isPlaying ? 'playing' : 'paused');
}

async function previousTrack() {
    if (appState.music.playlist.length === 0) return;
    
    if (appState.music.currentTrack <= 0) {
        appState.music.currentTrack = appState.music.playlist.length - 1;
    } else {
        appState.music.currentTrack--;
    }
    
    updateTrackSelection();
    updateNowPlaying();
    
    // Send previous command to ESP8266
    await sendToESP('previous');
    
    if (appState.music.isPlaying) {
        showStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: ${appState.music.playlist[appState.music.currentTrack].name}`);
    } else {
        showStatus(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á: ${appState.music.playlist[appState.music.currentTrack].name}`);
    }
    
    console.log('Previous track:', appState.music.playlist[appState.music.currentTrack].name);
}

async function nextTrack() {
    if (appState.music.playlist.length === 0) return;
    
    if (appState.music.currentTrack >= appState.music.playlist.length - 1) {
        appState.music.currentTrack = 0;
    } else {
        appState.music.currentTrack++;
    }
    
    updateTrackSelection();
    updateNowPlaying();
    
    // Send next command to ESP8266
    await sendToESP('next');
    
    if (appState.music.isPlaying) {
        showStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: ${appState.music.playlist[appState.music.currentTrack].name}`);
    } else {
        showStatus(`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á: ${appState.music.playlist[appState.music.currentTrack].name}`);
    }
    
    console.log('Next track:', appState.music.playlist[appState.music.currentTrack].name);
}

function updateTrackSelection() {
    const soundSelect = document.getElementById('soundSelect');
    if (appState.music.currentTrack >= 0) {
        soundSelect.value = appState.music.playlist[appState.music.currentTrack].id;
        appState.sound.type = appState.music.playlist[appState.music.currentTrack].id;
    }
}

function updateNowPlaying() {
    const nowPlaying = document.getElementById('nowPlaying');
    const trackName = nowPlaying.querySelector('.track-name');
    
    if (appState.music.currentTrack >= 0) {
        trackName.textContent = appState.music.playlist[appState.music.currentTrack].name;
    } else {
        trackName.textContent = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á';
        nowPlaying.classList.remove('playing');
    }
}

async function updateVolume(value) {
    document.getElementById('volumeValue').textContent = `${value}%`;
    appState.sound.volume = parseInt(value);
    
    // Convert percentage to DFPlayer volume (0-30)
    const dfVolume = Math.round((parseInt(value) / 100) * CONFIG.DFPLAYER_MAX_VOLUME);
    await sendToESP('volume', { level: dfVolume });
    
    showStatus(`‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${value}%`);
    console.log('Volume set to:', value + '%', 'DFPlayer volume:', dfVolume);
}

function toggleSoundMode(toggle) {
    toggle.classList.toggle('active');
    const timerDiv = document.getElementById('soundTimer');
    
    if (toggle.classList.contains('active')) {
        timerDiv.style.display = 'none';
        appState.sound.mode = 'loop';
        showStatus('‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏°: ‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏ô‡∏ã‡πâ‡∏≥');
    } else {
        timerDiv.style.display = 'flex';
        appState.sound.mode = 'timer';
        showStatus('‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏°: ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤');
    }
}

// Timer Functions
function setTimer(button, device, minutes) {
    const buttons = button.parentElement.querySelectorAll('.btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    button.classList.add('active');
    
    const deviceNames = {
        'light': '‡πÅ‡∏™‡∏á',
        'fan': '‡∏û‡∏±‡∏î‡∏•‡∏°',
        'sound': '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏°'
    };
    
    const timeText = minutes < 60 ? `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ` : `${minutes/60} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
    
    // Clear existing timer if any
    if (appState[device].timer) {
        clearTimeout(appState[device].timer);
    }
    
    // Set new timer
    appState[device].timer = setTimeout(() => {
        if (device === 'light') {
            // Turn off light
            const offButton = document.querySelector('.card:nth-child(1) .btn');
            setLightLevel(offButton, 0);
        } else if (device === 'fan') {
            // Turn off fan
            const offButton = document.querySelector('.card:nth-child(2) .btn');
            setFanSpeed(offButton, 0);
        } else if (device === 'sound') {
            // Stop sound
            document.getElementById('soundSelect').value = '';
            appState.sound.type = '';
        }
        
        showStatus(`${deviceNames[device]}: ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤)`);
    }, minutes * 60 * 1000);
    
    showStatus(`${deviceNames[device]}: ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ${timeText}`);
    console.log(`${device} timer set to ${minutes} minutes`);
}

// Test connection function
async function testConnection() {
    console.log('Manual connection test initiated');
    showStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP8266...');
    const connected = await checkESPConnection();
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    if (!connected) {
        setTimeout(() => {
            showTroubleshootingGuide();
        }, 2000);
    }
}

// Show troubleshooting guide
function showTroubleshootingGuide() {
    const guide = document.getElementById('troubleshootingGuide');
    guide.style.display = 'block';
    guide.scrollIntoView({ behavior: 'smooth' });
    showStatus('‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
}

// Close troubleshooting guide
function closeTroubleshootingGuide() {
    const guide = document.getElementById('troubleshootingGuide');
    guide.style.display = 'none';
}

// Network diagnostics
async function runNetworkDiagnostics() {
    console.log('üîç Running network diagnostics...');
    
    const diagnostics = {
        browserSupport: typeof fetch !== 'undefined',
        currentURL: window.location.href,
        userAgent: navigator.userAgent,
        onlineStatus: navigator.onLine,
        espIP: ESP8266_IP,
        timestamp: new Date().toISOString()
    };
    
    console.table(diagnostics);
    
    // Test different connection methods
    const tests = [
        { name: 'Fetch API', method: () => sendToESP('status') },
        { name: 'Image Ping', method: () => pingESP() },
        { name: 'XMLHttpRequest', method: () => testXHR() }
    ];
    
    for (const test of tests) {
        try {
            console.log(`Testing ${test.name}...`);
            const result = await test.method();
            console.log(`‚úÖ ${test.name}: ${result ? 'Success' : 'Failed'}`);
        } catch (error) {
            console.log(`‚ùå ${test.name}: ${error.message}`);
        }
    }
}

// Test XMLHttpRequest as fallback (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤)
function testXHR() {
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.timeout = 5000;
        
        xhr.onload = () => {
            try {
                const data = JSON.parse(xhr.responseText);
                resolve(data.status === 'ok');
            } catch (e) {
                resolve(xhr.status === 200);
            }
        };
        xhr.onerror = () => reject(new Error('XHR failed'));
        xhr.ontimeout = () => reject(new Error('XHR timeout'));
        
        try {
            xhr.open('GET', `http://${ESP8266_IP}/status`, true);
            xhr.setRequestHeader('Accept', 'application/json');
            xhr.send();
        } catch (error) {
            reject(error);
        }
    });
}

// Initialize app
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ SleepHelper App initialized');
    showStatus('‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà SleepHelper', 2000);
    // Load persisted settings
    loadSettings();
    
    // Run network diagnostics
    await runNetworkDiagnostics();
    
    // Start connection monitoring
    startConnectionMonitoring();
    
    // Initial ESP8266 connection check
    setTimeout(async () => {
        console.log('üîç Starting initial ESP8266 connection check...');
        const connected = await checkESPConnection();
        
        if (!connected) {
            console.log('‚ùå Initial connection failed - showing troubleshooting tips');
            setTimeout(() => {
                if (appState.currentPage === 'control') {
                    showStatus('üí° ‡∏Ñ‡∏•‡∏¥‡∏Å üîÑ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤', 5000);
                }
            }, 3000);
        }
    }, 3000);
});
